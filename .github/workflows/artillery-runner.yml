name: "Artillery Load Test (Multi-Runner)"

# Dynamic run-name shown in GitHub Actions UI
run-name: >
  Artillery Workflow: ${{ github.event.inputs.test_name }}
on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Choose test type (e.g., load/cleanup)"
        required: true
        type: choice
        options:
          - load
          - cleanup
      app_name:
        description: "Application to test (app1, app2, etc.)"
        required: true
        type: choice
        options:
          - app1
          - app2
      runners_to_use:
        description: "Number of parallel runners to use (1–4)"
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
      scenario_file:
        description: "YAML file for Artillery test (e.g., cloudrun-loadtest.yml)"
        required: true
        default: "aws_api.yml"
      test_name:
        description: "Optional test name; if blank, YYYYMMDD will be used"
        required: true
        default: ""
      run_name:
        description: "Optional custom run name; overrides test_name if provided"
        required: false
        default: ""
      monitor_system:
        description: "Monitor runner CPU/memory usage during test? true/false"
        required: false
        type: choice
        options:
          - "true"
          - "false"
        default: "false"
      cleanup_days:
        description: "Delete reports older than X days (cleanup mode)"
        required: false
        default: "7"
      print_machine_info:
        description: "Set true to print machine details"
        required: false
        type: choice
        options:
          - "true"
          - "false"

env:
  ARTILLERY_VERSION: "2.0.21"
  SCRIPTS_DIR: "./applications/${{ github.event.inputs.app_name }}/scripts"
  DATA_DIR: "./applications/${{ github.event.inputs.app_name }}/data"
  UPLOAD_RESULTS: "true"
  
  # -------------------------------
  # Variables for Python script environment (Requirement 2)
  # -------------------------------
  PY_APP_NAME: ${{ github.event.inputs.app_name }}
  PY_TEST_NAME: ${{ github.event.inputs.test_name }}        
  PY_RUN_ID: ${{ github.event.inputs.run_name }}            
  PY_SLA: ""                                               
  PY_MODE: ""                                              
  PY_GRANULARITY: ""                                       
  PY_SHOW_OVERALL_METRICS: ""                              

# =========================================================
# The required 'jobs' property starts here, at the top level.
# =========================================================
jobs:
  set-test-name:
    runs-on: ubuntu-latest
    outputs:
      final_test_name: ${{ steps.determine.outputs.final_test_name }}

    steps:
      # -------------------------------
      # Determine final test name based on user input (Requirement 1)
      # -------------------------------
      - id: determine
        run: |
          DATE_MMDDYYYY=$(date +%m%d%Y)
          DATE_YYYYMMDD=$(date +%Y%m%d)
          
          BASE_NAME="artillery"

          # Conditional logic for building the final name
          if [ -n "${{ github.event.inputs.test_name }}" ] && [ -n "${{ github.event.inputs.run_name }}" ]; then
            # ✅ Both provided
            FINAL_NAME="${BASE_NAME}-${{ github.event.inputs.test_name }}-${{ github.event.inputs.run_name }}"
          elif [ -n "${{ github.event.inputs.test_name }}" ]; then
            # ✅ Only test name provided
            FINAL_NAME="${BASE_NAME}-${{ github.event.inputs.test_name }}"
          elif [ -n "${{ github.event.inputs.run_name }}" ]; then
            # ✅ Only run name provided
            FINAL_NAME="${BASE_NAME}-${{ github.event.inputs.run_name }}"
          else
            # ✅ Neither provided — fallback with date
            FINAL_NAME="${BASE_NAME}-test-${DATE_YYYYMMDD}-run_${DATE_MMDDYYYY}"
          fi
          
          echo "final_test_name=$FINAL_NAME" >> $GITHUB_OUTPUT

  run-artillery:
    name: ${{ needs.set-test-name.outputs.final_test_name }} - Runner ${{ matrix.runner_index }}
    runs-on: ubuntu-latest
    needs: set-test-name

    strategy:
      fail-fast: false
      matrix:
        runner_index: [1, 2, 3, 4]

    steps:
      # -------------------------------
      # Set REPORT_DIR using the output from the set-test-name job (Fix for Error)
      # -------------------------------
      - name: Set job environment variables
        id: set_env
        run: |
          echo "REPORT_DIR=./reports/${{ github.event.inputs.app_name }}/${{ needs.set-test-name.outputs.final_test_name }}" >> $GITHUB_ENV
          
      # -------------------------------
      # Checkout repository code
      # -------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------
      # Optional: Print machine info
      # -------------------------------
      - name: Print machine details
        if: ${{ github.event.inputs.print_machine_info == 'true' }}
        shell: bash
        run: |
          echo "===== Machine Info ====="
          echo "CPU cores: $(nproc)"
          echo "Memory: $(free -h)"
          echo "IP: $(curl -s ifconfig.me)"
          echo "Location info:"
          curl -s https://ipapi.co/json/
          echo "========================"
      # -------------------------------
      # Skip runners not selected by user
      # -------------------------------
      - name: Skip unused runner jobs
        if: ${{ matrix.runner_index > fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          echo "Skipping runner ${{ matrix.runner_index }} (not selected)"
          exit 0
      # -------------------------------
      # Setup Python environment
      # -------------------------------
      - name: Setup Python
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.1"

      # -------------------------------
      # Install Python dependencies
      # -------------------------------
      - name: Install Python Dependencies
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          python -m pip install --upgrade pip
          pip install pandas plotly numpy pyyaml
      # -------------------------------
      # Ensure scenario YAML exists
      # -------------------------------
      - name: Check scenario YAML exists
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          if [ ! -f "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" ]; then
            echo "Scenario file not found!"
            exit 1
          else
            echo "Found scenario file: ${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}"
          fi
      # -------------------------------
      # Setup Node.js environment
      # -------------------------------
      - name: Setup Node.js
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # -------------------------------
      # Install Artillery and plugin
      # -------------------------------
      - name: Install Artillery + Plugin
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          npm install -g artillery@${{ env.ARTILLERY_VERSION }}
          npm install --save-dev artillery-plugin-metrics-by-endpoint
          npm install @faker-js/faker
          artillery --version
      # -------------------------------
      # Optional System Monitoring
      # -------------------------------
      - name: Start system monitoring (optional)
        if: ${{ github.event.inputs.monitor_system == 'true' && matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          LOG_FILE="${{ env.REPORT_DIR }}/runner-${{ matrix.runner_index }}-system.log"
          echo "timestamp,cpu_user,cpu_system,cpu_idle,mem_used,mem_free" > $LOG_FILE
          monitor() {
            while true; do
              ts=$(date +"%Y-%m-%d %H:%M:%S")
              cpu=$(mpstat 1 1 | awk '/Average/ {print $3","$5","$12}')
              mem=$(free -m | awk '/Mem:/ {print $3","$4}')
              echo "$ts,$cpu,$mem" >> $LOG_FILE
              sleep 180
            done
          }
          monitor &
          echo $! > /tmp/monitor_pid.txt
          echo "System monitoring started in background, logging every 5 minutes."
      # -------------------------------
      # Run Artillery test
      # -------------------------------
      - name: Run Artillery Test
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        id: run_test
        shell: bash
        run: |
          mkdir -p "${{ env.REPORT_DIR }}"
          TIMESTAMP=$(date +%Y%m%d)
          RANDOM_SUFFIX=$(head /dev/urandom | tr -dc a-z0-9 | head -c 6)
          TEST_NAME="${{ needs.set-test-name.outputs.final_test_name }}"
          RESULT_JSON="${TEST_NAME}-runner-${{ matrix.runner_index }}-${RANDOM_SUFFIX}.json"
          RESULT_HTML="${TEST_NAME}-runner-${{ matrix.runner_index }}-${RANDOM_SUFFIX}-full.html"
          echo "Running Artillery test, output JSON: $RESULT_JSON"
          ARTILLERY_TARGET="${{ vars.BASE_URL }}" \
          API_KEY="${{ secrets.API_KEY }}" \
          AUTH_HEADER="${{ secrets.AUTH_HEADER }}" \
          npx artillery run "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" \
          --output "${{ env.REPORT_DIR }}/$RESULT_JSON"
          npx artillery report "${{ env.REPORT_DIR }}/$RESULT_JSON" --output "${{ env.REPORT_DIR }}/$RESULT_HTML"
          echo "result_json=$RESULT_JSON" >> $GITHUB_OUTPUT
          echo "result_html=$RESULT_HTML" >> $GITHUB_OUTPUT
      # -------------------------------
      # Stop system monitoring (optional)
      # -------------------------------
      - name: Stop system monitoring (optional)
        if: ${{ github.event.inputs.monitor_system == 'true' && matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        shell: bash
        run: |
          if [ -f /tmp/monitor_pid.txt ]; then
            kill $(cat /tmp/monitor_pid.txt) || true
            rm /tmp/monitor_pid.txt
            echo "System monitoring stopped."
          fi
      # -------------------------------
      # Upload system monitoring logs (optional)
      # -------------------------------
      - name: Upload system monitoring logs (optional)
        if: ${{ github.event.inputs.monitor_system == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: runner-${{ matrix.runner_index }}-system-logs
          path: ${{ env.REPORT_DIR }}/runner-${{ matrix.runner_index }}-system.log

      # -------------------------------
      # Generate Python dashboard for this runner (Requirement 2)
      # -------------------------------
      - name: Generate Python dashboard for this runner
        if: ${{ matrix.runner_index <= fromJSON(github.event.inputs.runners_to_use) }}
        continue-on-error: true
        shell: bash
        run: |
          RUNNER_HTML="${{ env.REPORT_DIR }}/runner-${{ matrix.runner_index }}-dashboard.html"
          echo "Generating dashboard for runner ${{ matrix.runner_index }}..."
          
          ARGS=""
          
          if [ -n "${{ env.PY_APP_NAME }}" ]; then
            ARGS="$ARGS --app-name \"${{ env.PY_APP_NAME }}\""
          fi
          
          if [ -n "${{ env.PY_TEST_NAME }}" ]; then
            ARGS="$ARGS --test-name \"${{ env.PY_TEST_NAME }}\""
          fi
          
          if [ -n "${{ env.PY_SLA }}" ]; then
            ARGS="$ARGS --sla \"${{ env.PY_SLA }}\""
          fi
          
          if [ -n "${{ env.PY_MODE }}" ]; then
            ARGS="$ARGS --mode \"${{ env.PY_MODE }}\""
          fi
          
          if [ -n "${{ env.PY_GRANULARITY }}" ]; then
            ARGS="$ARGS --granularity \"${{ env.PY_GRANULARITY }}\""
          fi
          
          if [ -n "${{ env.PY_SHOW_OVERALL_METRICS }}" ]; then
            ARGS="$ARGS --show-overall-metrics"
          fi
          
          python "${GITHUB_WORKSPACE}/utilities/generate_artillery_dashboard.py" \
            --json "${{ env.REPORT_DIR }}/${{ steps.run_test.outputs.result_json }}" \
            --yaml "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" \
            --output "$RUNNER_HTML" \
            $ARGS || echo "⚠️ Python script failed, continuing workflow"
          
          echo "Generated Python dashboard (if successful): $RUNNER_HTML"
      # -------------------------------
      # Package Artillery results into ZIP
      # -------------------------------
      - name: Package Artillery results into ZIP
        if: always()
        shell: bash
        run: |
          ZIP_NAME="runner-${{ matrix.runner_index }}-results.zip"
          mkdir -p upload
          echo "Packaging available files for runner ${{ matrix.runner_index }}..."
          zip -r "upload/$ZIP_NAME" "${{ env.REPORT_DIR }}" || echo "⚠️ ZIP packaging encountered a warning"
          echo "Packaged runner ZIP: upload/$ZIP_NAME"
      # -------------------------------
      # Upload runner artifact
      # -------------------------------
      - name: Upload runner artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artillery-results-runner-${{ matrix.runner_index }}
          path: upload/*.zip
        continue-on-error: true

  aggregate-reports:
    if: always()
    needs: [set-test-name, run-artillery]
    runs-on: ubuntu-latest

    steps:
      # -------------------------------
      # Set REPORT_DIR for this job
      # -------------------------------
      - name: Set job environment variables
        id: set_env
        run: |
          echo "REPORT_DIR=./reports/${{ github.event.inputs.app_name }}/${{ needs.set-test-name.outputs.final_test_name }}" >> $GITHUB_ENV
          
      # -------------------------------
      # Checkout repository
      # -------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------
      # Download all runner artifacts (optional)
      # -------------------------------
      - name: Download all runner artifacts
        uses: actions/download-artifact@v4
        with:
          path: artillery-results
        continue-on-error: true

      # -------------------------------
      # Extract all runner ZIPs
      # -------------------------------
      - name: Extract all runner ZIPs
        shell: bash
        run: |
          mkdir -p combined-results
          for zipfile in artillery-results/**/*.zip; do
            [ -f "$zipfile" ] || continue
            foldername=$(basename "$zipfile" .zip)
            mkdir -p combined-results/"$foldername"
            unzip -o "$zipfile" -d combined-results/"$foldername"
          done

      # -------------------------------
      # Determine test name for consolidated files
      # -------------------------------
      - name: Determine test name
        id: test_name
        shell: bash
        run: |
          CONSOLIDATED_NAME="${{ needs.set-test-name.outputs.final_test_name }}"
          echo "consolidated_test_name=$CONSOLIDATED_NAME" >> $GITHUB_OUTPUT

      # -------------------------------
      # Collect all JSON filenames
      # -------------------------------
      - name: Collect all JSON filenames
        id: collect_jsons
        shell: bash
        run: |
          JSON_FILES=$(find combined-results -name '*.json' -type f | paste -sd "," -)
          if [ -z "$JSON_FILES" ]; then
            echo "No JSON files found. Skipping final dashboard generation."
            echo "json_files=" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "json_files=$JSON_FILES" >> $GITHUB_OUTPUT

      # -------------------------------
      # Setup Python for consolidation
      # -------------------------------
      - name: Setup Python
        if: ${{ steps.collect_jsons.outputs.json_files != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.1"

      - name: Install Python Dependencies
        if: ${{ steps.collect_jsons.outputs.json_files != '' }}
        run: |
          python -m pip install --upgrade pip
          pip install pandas pyyaml plotly numpy

      # -------------------------------
      # Generate consolidated Python dashboard (Requirement 2)
      # -------------------------------
      - name: Generate consolidated Python dashboard
        if: ${{ steps.collect_jsons.outputs.json_files != '' }}
        shell: bash
        continue-on-error: true
        run: |
          FINAL_HTML="${{ steps.test_name.outputs.consolidated_test_name }}-consolidated-dashboard.html"
          
          ARGS=""
          
          if [ -n "${{ env.PY_APP_NAME }}" ]; then
            ARGS="$ARGS --app-name \"${{ env.PY_APP_NAME }}\""
          fi
          
          if [ -n "${{ env.PY_TEST_NAME }}" ]; then
            ARGS="$ARGS --test-name \"${{ env.PY_TEST_NAME }}\""
          fi
          
          if [ -n "${{ env.PY_SLA }}" ]; then
            ARGS="$ARGS --sla \"${{ env.PY_SLA }}\""
          fi
          
          if [ -n "${{ env.PY_MODE }}" ]; then
            ARGS="$ARGS --mode \"${{ env.PY_MODE }}\""
          fi
          
          if [ -n "${{ env.PY_GRANULARITY }}" ]; then
            ARGS="$ARGS --granularity \"${{ env.PY_GRANULARITY }}\""
          fi
          
          if [ -n "${{ env.PY_SHOW_OVERALL_METRICS }}" ]; then
            ARGS="$ARGS --show-overall-metrics"
          fi
          
          python "${GITHUB_WORKSPACE}/utilities/generate_artillery_dashboard.py" \
            --json "${{ steps.collect_jsons.outputs.json_files }}" \
            --yaml "${{ env.SCRIPTS_DIR }}/${{ github.event.inputs.scenario_file }}" \
            --output "$FINAL_HTML" \
            $ARGS || echo "⚠️ Python consolidation failed, continuing."

      # -------------------------------
      # Package consolidated artifacts
      # -------------------------------
      - name: Package consolidated artifacts
        shell: bash
        run: |
          mkdir -p final-upload
          cp artillery-results/**/*.zip final-upload/ || true
          cp *.html final-upload/ || true
          zip -r "consolidated-results.zip" final-upload/
          echo "Packaged all results into consolidated-results.zip"

      # -------------------------------
      # Upload consolidated artifacts as GitHub artifact
      # -------------------------------
      - name: Upload consolidated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-artillery-results
          path: consolidated-results.zip

      # -------------------------------
      # Upload consolidated artifact to results folder (flag-based)
      # -------------------------------
      - name: Upload consolidated results to results folder
        if: ${{ env.UPLOAD_RESULTS == 'true' }}
        shell: bash
        run: |
          FINAL_RESULTS_DIR="./results/${{ github.event.inputs.app_name }}/${{ steps.test_name.outputs.consolidated_test_name }}"
          mkdir -p "$FINAL_RESULTS_DIR"
          cp consolidated-results.zip "$FINAL_RESULTS_DIR/"
          echo "✅ Consolidated results uploaded to $FINAL_RESULTS_DIR"

  cleanup-artifacts:
    if: ${{ github.event.inputs.test_type == 'cleanup' }}
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Delete old reports from local reports folder
        shell: bash
        run: |
          REPORT_DIR="./reports/${{ github.event.inputs.app_name }}"
          DAYS=${{ github.event.inputs.cleanup_days || 7 }}

          echo "Deleting local reports older than $DAYS days from $REPORT_DIR"

          find "$REPORT_DIR" -type f \( -name '*.json' -o -name '*.html' -o -name '*.zip' \) -mtime +$DAYS -print -delete

          echo "Local report cleanup completed."

      - name: Delete old GitHub Actions artifacts
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DAYS=${{ github.event.inputs.cleanup_days || 7 }}
          echo "Deleting GitHub Actions artifacts older than $DAYS days"

          ARTIFACTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=100" | jq -r '.artifacts[] | "\(.id) \(.created_at)"')

          NOW=$(date +%s)

          while read -r ID CREATED_AT; do
            ART_TS=$(date -d "$CREATED_AT" +%s)
            AGE=$(( (NOW - ART_TS) / 86400 ))
            if [ "$AGE" -gt "$DAYS" ]; then
              echo "Deleting artifact ID: $ID (created $CREATED_AT, $AGE days old)"
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ID"
            fi
          done <<< "$ARTIFACTS"

          echo "GitHub artifact cleanup completed."
