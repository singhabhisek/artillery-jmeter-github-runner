name: "Artillery Load Test (Multi-Runner, Env-Aware)"

# ============================================================
# PURPOSE:
# This workflow automates load testing using Artillery for multiple
# applications and environments (test/prod). It can:
#  - Run parallel tests across multiple GitHub runners
#  - Aggregate results and generate dashboards
#  - Clean up old reports/artifacts when requested
# ============================================================

# ============================================================
# Trigger: Manual dispatch via GitHub UI with input parameters
# ============================================================
on:
  workflow_dispatch:
    inputs:
      test_type:
        description: "Choose test type: 'load' to run tests, or 'cleanup' to delete old reports/artifacts"
        required: true
        type: choice
        options:
          - load
          - cleanup

      environment_name:
        description: "Select environment (test or prod)"
        required: true
        type: choice
        options:
          - test
          - prod

      app_name:
        description: "Application to test (e.g., app1, app2)"
        required: true
        type: choice
        options:
          - app1
          - app2

      runners_to_use:
        description: "Number of parallel runners to use (1â€“4)"
        required: true
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'

      scenario_file:
        description: "YAML file for Artillery scenario (e.g., loadtest.yml)"
        required: true
        default: "aws_api.yml"

      test_name:
        description: "Optional test name (blank = auto-generated)"
        required: false
        default: ""

      run_name:
        description: "Optional run name (blank = auto-generated)"
        required: false
        default: ""

      monitor_system:
        description: "Enable runner CPU/memory monitoring during tests?"
        required: false
        type: choice
        options:
          - "true"
          - "false"
        default: "false"

      cleanup_days:
        description: "Delete reports/artifacts older than X days (used in cleanup mode)"
        required: false
        default: "7"

      print_machine_info:
        description: "Print machine details before running?"
        required: false
        type: choice
        options:
          - "true"
          - "false"
        default: "false"

# ============================================================
# Global environment variables used throughout all jobs
# ============================================================
env:
  ARTILLERY_VERSION: "2.0.21"
  UPLOAD_RESULTS: "true"

# ============================================================
# JOB 1: Set test name dynamically
# ============================================================
jobs:
  set-test-name:
    runs-on: ubuntu-latest
    outputs:
      final_test_name: ${{ steps.determine.outputs.final_test_name }}

    steps:
      - id: determine
        run: |
          # ----------------------------------------------------
          # Dynamically build the test name using inputs
          # ----------------------------------------------------
          DATE_MMDDYYYY=$(date +%m%d%Y)
          DATE_YYYYMMDD=$(date +%Y%m%d)
          BASE_NAME="artillery"

          # Construct name based on which inputs are given
          if [ -n "${{ github.event.inputs.test_name }}" ] && [ -n "${{ github.event.inputs.run_name }}" ]; then
            FINAL_NAME="${BASE_NAME}-${{ github.event.inputs.test_name }}-${{ github.event.inputs.run_name }}"
          elif [ -n "${{ github.event.inputs.test_name }}" ]; then
            FINAL_NAME="${BASE_NAME}-${{ github.event.inputs.test_name }}"
          elif [ -n "${{ github.event.inputs.run_name }}" ]; then
            FINAL_NAME="${BASE_NAME}-${{ github.event.inputs.run_name }}"
          else
            FINAL_NAME="${BASE_NAME}-test-${DATE_YYYYMMDD}-run_${DATE_MMDDYYYY}"
          fi

          echo "âœ… Final test name: $FINAL_NAME"
          echo "final_test_name=$FINAL_NAME" >> $GITHUB_OUTPUT

# ============================================================
# JOB 2: Run Artillery tests in parallel (if test_type == load)
# ============================================================
  run-artillery:
    if: ${{ github.event.inputs.test_type == 'load' }}
    name: "Run Artillery Tests"
    runs-on: ubuntu-latest
    needs: set-test-name

    # Use environment-specific secrets/variables (test/prod)
    environment: ${{ github.event.inputs.environment_name }}

    strategy:
      fail-fast: false
      matrix:
        runner_index: [1, 2, 3, 4]

    steps:
      # -----------------------------
      # Skip unused runners
      # -----------------------------
      - name: Skip Unused Runner
        if: ${{ matrix.runner_index > fromJSON(github.event.inputs.runners_to_use) }}
        run: |
          echo "Skipping runner ${{ matrix.runner_index }}"
          exit 0

      # -----------------------------
      # Checkout source code
      # -----------------------------
      - uses: actions/checkout@v4

      # -----------------------------
      # Optional: Print runner details
      # -----------------------------
      - name: Print Machine Info
        if: ${{ github.event.inputs.print_machine_info == 'true' }}
        run: |
          echo "===== Machine Info ====="
          nproc
          free -h
          uname -a
          echo "========================"

      # -----------------------------
      # Setup Node.js environment
      # -----------------------------
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # -----------------------------
      # Install Artillery globally
      # -----------------------------
      - name: Install Artillery
        run: |
          npm install -g artillery@${{ env.ARTILLERY_VERSION }}
          npm install --save-dev artillery-plugin-metrics-by-endpoint
          artillery --version

      # -----------------------------
      # Run Artillery Test
      # -----------------------------
      - name: Run Artillery Test
        env:
          BASE_URL: ${{ vars.BASE_URL }}
          API_KEY: ${{ secrets.API_KEY }}
          AUTH_HEADER: ${{ secrets.AUTH_HEADER }}
        run: |
          # Prepare directories
          REPORT_DIR="./reports/${{ github.event.inputs.app_name }}/${{ needs.set-test-name.outputs.final_test_name }}"
          mkdir -p "$REPORT_DIR"

          # Construct output filenames
          JSON_OUT="$REPORT_DIR/result-runner-${{ matrix.runner_index }}.json"
          HTML_OUT="$REPORT_DIR/result-runner-${{ matrix.runner_index }}.html"

          echo "ðŸš€ Running Artillery for ${{ github.event.inputs.app_name }} on environment: ${{ github.event.inputs.environment_name }}"
          echo "ðŸ”— Target URL: $BASE_URL"

          # Run test using environment secrets & vars
          ARTILLERY_TARGET="$BASE_URL" \
          API_KEY="$API_KEY" \
          AUTH_HEADER="$AUTH_HEADER" \
          npx artillery run "applications/${{ github.event.inputs.app_name }}/scripts/${{ github.event.inputs.scenario_file }}" \
            --output "$JSON_OUT"

          # Generate HTML report
          npx artillery report "$JSON_OUT" --output "$HTML_OUT"

          echo "âœ… Artillery reports generated at: $REPORT_DIR"

      # -----------------------------
      # Upload each runnerâ€™s report as an artifact
      # -----------------------------
      - name: Upload Runner Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "artillery-results-runner-${{ matrix.runner_index }}"
          path: reports/${{ github.event.inputs.app_name }}/${{ needs.set-test-name.outputs.final_test_name }}/

# ============================================================
# JOB 3: Aggregate results after all runners finish
# ============================================================
  aggregate-reports:
    if: ${{ github.event.inputs.test_type == 'load' }}
    name: "Aggregate & Upload Final Reports"
    runs-on: ubuntu-latest
    needs: [set-test-name, run-artillery]

    environment: ${{ github.event.inputs.environment_name }}

    steps:
      - uses: actions/checkout@v4

      # -----------------------------
      # Download all runner artifacts
      # -----------------------------
      - name: Download All Runner Artifacts
        uses: actions/download-artifact@v4
        with:
          path: combined-reports

      # -----------------------------
      # Combine runner outputs into reports/<app>/<testname>/
      # -----------------------------
      - name: Consolidate Reports
        run: |
          FINAL_DIR="./reports/${{ github.event.inputs.app_name }}/${{ needs.set-test-name.outputs.final_test_name }}"
          mkdir -p "$FINAL_DIR"
          cp -r combined-reports/* "$FINAL_DIR"/ || true

          cd "$FINAL_DIR"
          zip -r "../../../consolidated-${{ needs.set-test-name.outputs.final_test_name }}.zip" ./
          echo "âœ… Consolidated ZIP created: consolidated-${{ needs.set-test-name.outputs.final_test_name }}.zip"

      # -----------------------------
      # Upload consolidated results as artifact
      # -----------------------------
      - name: Upload Consolidated Artifact
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-artillery-results
          path: consolidated-${{ needs.set-test-name.outputs.final_test_name }}.zip

      # -----------------------------
      # Copy ZIP into local reports folder for repo storage
      # -----------------------------
      - name: Store Final Reports in Repo Folder
        run: |
          mkdir -p "./reports/${{ github.event.inputs.app_name }}/${{ needs.set-test-name.outputs.final_test_name }}"
          cp "consolidated-${{ needs.set-test-name.outputs.final_test_name }}.zip" \
             "./reports/${{ github.event.inputs.app_name }}/${{ needs.set-test-name.outputs.final_test_name }}/"
          echo "ðŸ“¦ Final results stored in reports/${{ github.event.inputs.app_name }}/${{ needs.set-test-name.outputs.final_test_name }}/"

# ============================================================
# JOB 4: Cleanup (Only deletes old reports and artifacts)
# ============================================================
  cleanup-artifacts:
    if: ${{ github.event.inputs.test_type == 'cleanup' }}
    name: "Cleanup Old Reports & Artifacts"
    runs-on: ubuntu-latest
    permissions:
      actions: write

    steps:
      - uses: actions/checkout@v4

      # -----------------------------
      # Delete old local reports
      # -----------------------------
      - name: Delete Old Local Reports
        run: |
          REPORT_DIR="./reports/${{ github.event.inputs.app_name }}"
          DAYS=${{ github.event.inputs.cleanup_days }}
          echo "ðŸ§¹ Deleting local reports older than $DAYS days from $REPORT_DIR"
          find "$REPORT_DIR" -type f \( -name '*.json' -o -name '*.html' -o -name '*.zip' \) -mtime +$DAYS -print -delete
          echo "âœ… Local report cleanup completed."

      # -----------------------------
      # Delete old GitHub Actions artifacts
      # -----------------------------
      - name: Delete Old GitHub Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DAYS=${{ github.event.inputs.cleanup_days }}
          echo "ðŸ§¹ Deleting GitHub Actions artifacts older than $DAYS days..."

          ARTIFACTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=100" \
            | jq -r '.artifacts[] | "\(.id) \(.created_at)"')

          NOW=$(date +%s)
          while read -r ID CREATED_AT; do
            ART_TS=$(date -d "$CREATED_AT" +%s)
            AGE=$(( (NOW - ART_TS) / 86400 ))
            if [ "$AGE" -gt "$DAYS" ]; then
              echo "Deleting artifact ID: $ID (created $CREATED_AT, $AGE days old)"
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$ID"
            fi
          done <<< "$ARTIFACTS"

          echo "âœ… GitHub artifact cleanup completed."
